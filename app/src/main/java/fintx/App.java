/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package fintx;

import fintx.format.ReportFormatter;
import fintx.model.DateRange;
import fintx.model.ImmutableDateRange;
import fintx.model.Report;
import fintx.report.Reconciler;
import java.io.File;
import java.time.LocalDate;
import java.util.Optional;
import java.util.concurrent.Callable;
import picocli.CommandLine;

@CommandLine.Command
public class App implements Callable<Report> {

    private static final int SUCCESS = 0;
    private static final int FAIL = 1;

    @CommandLine.Option(
            names = "-r",
            description = "Rakuten transactions file in CSV format",
            required = true)
    private File rakutenFile;

    @CommandLine.Option(
            names = "-g",
            description = "Generic transactions file in CSV format",
            required = true)
    private File genericFile;

    @CommandLine.Option(
            names = {"-s", "--start", "--startInclusive"},
            description =
                    "Filter identifying the start date of the range records to match (inclusive)")
    private LocalDate startInclusive;

    @CommandLine.Option(
            names = {"-e", "--end", "--endExclusive"},
            description =
                    "Filter identifying the end date of the range records to match (exclusive)")
    private LocalDate endExclusive;

    public static void main(String[] args) {
        final CommandLine commandLine = new CommandLine(new App());
        final int commandLineExitCode = commandLine.execute(args);
        final Optional<Report> result = Optional.ofNullable(commandLine.getExecutionResult());
        result.ifPresent(App::print);
        System.exit(getFinalErrorCode(result, commandLineExitCode));
    }

    private static void print(final Report report) {
        String formattedReport = new ReportFormatter().format(report);
        System.out.println(formattedReport);
    }

    @Override
    public Report call() {
        final DateRange dateRange =
                ImmutableDateRange.of(
                        Optional.ofNullable(startInclusive), Optional.ofNullable(endExclusive));
        return new Reconciler().reconcile(rakutenFile, genericFile, dateRange);
    }

    static int getFinalErrorCode(final Optional<Report> result, final int commandLineExitCode) {
        return result.filter(report -> commandLineExitCode != SUCCESS || !report.hasErrors())
                .map(digestResult -> commandLineExitCode)
                .orElse(FAIL);
    }
}
