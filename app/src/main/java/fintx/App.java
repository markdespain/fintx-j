/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package fintx;

import fintx.digest.CsvDigester;
import fintx.digest.DigestResult;
import fintx.model.Err;
import java.io.File;
import java.util.Optional;
import java.util.concurrent.Callable;
import picocli.CommandLine;

@CommandLine.Command
public class App implements Callable<DigestResult> {

    private static final int SUCCESS = 0;
    private static final int FAIL = 1;

    @CommandLine.Option(names = "-r", description = "Rakuten transactions file in CSV format", required = true)
    private File rakutenFile;

    @CommandLine.Option(names = "-g", description = "Generic transactions file in CSV format", required = true)
    private File genericFile;

    public static void main(String[] args) {
        final CommandLine commandLine = new CommandLine(new App());
        final int commandLineExitCode = commandLine.execute(args);
        final Optional<DigestResult> result = Optional.ofNullable(commandLine.getExecutionResult());
        result.ifPresent(App::print);
        System.exit(getFinalErrorCode(result, commandLineExitCode));
    }

    private static void print(final DigestResult res) {
        if (!res.errors().isEmpty()) {
            System.err.println("ERRORS ENCOUNTERED:");
            res.errors().stream().map(Err::message).forEach(System.err::println);
        }
        if (!res.transactions().isEmpty()) {
            System.out.println("TRANSACTIONS:");
            res.transactions().forEach(System.out::println);
        }
    }

    @Override
    public DigestResult call() {
        final DigestResult rakuten = new CsvDigester(CsvDigester.RAKUTEN_CC).digest(rakutenFile);
        final DigestResult generic = new CsvDigester(CsvDigester.DEFAULT).digest(genericFile);
        print(generic);
        return rakuten;
    }

    static int getFinalErrorCode(
            final Optional<DigestResult> result, final int cmomandLineExitCode) {
        return result.filter(
                        digestResult ->
                                digestResult.errors().isEmpty() || cmomandLineExitCode != SUCCESS)
                .map(digestResult -> cmomandLineExitCode)
                .orElse(FAIL);
    }
}
