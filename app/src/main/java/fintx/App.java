/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package fintx;

import fintx.digest.DigestResult;
import fintx.digest.RakutenCsvStatementDigester;
import fintx.model.AppError;
import java.io.File;
import java.util.Optional;
import java.util.concurrent.Callable;
import picocli.CommandLine;

@CommandLine.Command
public class App implements Callable<DigestResult> {

    private static final int SUCCESS = 0;
    private static final int FAIL = 1;

    @CommandLine.Parameters(description = "file to digest")
    private File file;

    public static void main(String[] args) {
        final CommandLine commandLine = new CommandLine(new App());
        final int cmomandLineExitCode = commandLine.execute(args);
        final Optional<DigestResult> result = Optional.ofNullable(commandLine.getExecutionResult());
        result.ifPresent(
                res -> {
                    if (!res.errors().isEmpty()) {
                        System.err.println("ERRORS ENCOUNTERED:");
                        res.errors().stream().map(AppError::message).forEach(System.err::println);
                    }
                    if (!res.transactions().isEmpty()) {
                        System.out.println("TRANSACTIONS:");
                        res.transactions().forEach(System.out::println);
                    }
                });
        System.exit(getFinalErrorCode(result, cmomandLineExitCode));
    }

    @Override
    public DigestResult call() {
        return new RakutenCsvStatementDigester().digest(file);
    }

    static int getFinalErrorCode(final Optional<DigestResult> result, final int cmomandLineExitCode){
        return result
                .filter(digestResult -> digestResult.errors().isEmpty() || cmomandLineExitCode != SUCCESS)
                .map(digestResult -> cmomandLineExitCode)
                .orElse(FAIL);
    }
}
